#! /usr/bin/env python3

import boto3
import sys
import uuid
import os
from datetime import datetime, timedelta, timezone

current_path = os.path.dirname(os.path.abspath(__file__))
backend_path = os.path.abspath(os.path.join(
    current_path, '..', '..', 'backend-flask'))
sys.path.append(backend_path)
from lib.db import db

params = {}
if len(sys.argv) == 2 and "prod" in sys.argv[1]:
    params = {}
else:
    params = {'endpoint_url': 'http://localhost:8000'}

dynamodb = boto3.client('dynamodb', **params)


def get_user_uuids():
    sql = """
        SELECT 
        users.uuid,
        users.display_name,
        users.handle
        FROM users
        WHERE
        users.handle IN(
            %(my_handle)s,
            %(other_handle)s
            )
    """
    my_user_username = os.getenv('user1_username')
    other_handle_username = os.getenv('user2_username')

    users = db.query_array_json(sql, **{
        'my_handle':  my_user_username,
        'other_handle': other_handle_username
    })
    print(users)

    my_user = next(
        (item for item in users if item["handle"] == my_user_username), None)
    other_user = next(
        (item for item in users if item["handle"] == other_handle_username), None)
    results = {
        'my_user': my_user,
        'other_user': other_user
    }
    return results


def create_message_group(client, message_group_uuid, my_user_uuid, last_message_at=None, message=None, other_user_uuid=None, other_user_display_name=None, other_user_handle=None):
    table_name = "cruddr-messages"
    record = {
        'pk':   {'S': f"GRP#{my_user_uuid}"},
        'sk':   {'S': last_message_at},
        'message_group_uuid': {'S': message_group_uuid},
        'message':  {'S': message},
        'user_uuid': {'S': other_user_uuid},
        'user_display_name': {'S': other_user_display_name},
        'user_handle': {'S': other_user_handle}
    }

    response = client.put_item(
        TableName=table_name,
        Item=record
    )
    print(response)


def create_message(client, message_group_uuid, created_at, message, my_user_uuid, my_user_display_name, my_user_handle):
    record = {
        'pk':   {'S': f"MSG#{message_group_uuid}"},
        'sk':   {'S': created_at},
        'message_uuid': {'S': str(uuid.uuid4())},
        'message': {'S': message},
        'user_uuid': {'S': my_user_uuid},
        'user_display_name': {'S': my_user_display_name},
        'user_handle': {'S': my_user_handle}
    }
    # insert the record into the table
    table_name = "cruddr-messages"
    response = client.put_item(
        TableName=table_name,
        Item=record
    )
    # print the response
    print(response)


# str(uuid.uuid4())
message_group_uuid = "5ae290ed-55d1-47a0-bc6d-fe2bc2700399"
users = get_user_uuids()
print(users)
now = datetime.now(timezone.utc).astimezone()


create_message_group(
    client=dynamodb,
    message_group_uuid=message_group_uuid,
    my_user_uuid=users['my_user']['uuid'],
    other_user_uuid=users['other_user']['uuid'],
    other_user_handle=users['other_user']['handle'],
    other_user_display_name=users['other_user']['display_name'],
    last_message_at=now.isoformat(),
    message="this is a filler message"
)

create_message_group(
    client=dynamodb,
    message_group_uuid=message_group_uuid,
    my_user_uuid=users['other_user']['uuid'],
    other_user_uuid=users['my_user']['uuid'],
    other_user_handle=users['my_user']['handle'],
    other_user_display_name=users['my_user']['display_name'],
    last_message_at=now.isoformat(),
    message="this is a filler message"
)

conversation = """
bk: Hey aa, have you worked with UART before?
aa: Yeah, I have some experience with it. What do you want to know?
bk: I'm having some trouble understanding the basics of UART communication. Can you explain it to me?
aa: Sure. UART stands for Universal Asynchronous Receiver/Transmitter. It's a communication protocol that allows data to be transmitted between two devices. It's commonly used in microcontroller systems and other embedded applications.
bk: That makes sense. How does it work?
aa: Well, UART uses two wires to transmit data: a transmit line (TX) and a receive line (RX). Data is sent as a series of bits, with each bit being transmitted one at a time. The sender and receiver must agree on the baud rate, which is the speed at which the bits are transmitted.
bk: So, the baud rate is like the clock speed of the transmission?
aa: Exactly. The baud rate determines how many bits are transmitted per second. The sender and receiver must use the same baud rate, or the data won't be properly synchronized.
bk: Okay, that makes sense. How do you actually send data using UART?
aa: To send data, the sender starts by asserting the TX line to a logical "1" (also known as the "idle" state). Then, it sends each bit of the data, starting with the least significant bit. Each bit is sent in sequence, with a start bit (which is always a "0") and a stop bit (which is always a "1") surrounding it.
bk: Got it. And how does the receiver know when the data is done being transmitted?
aa: The receiver waits for the start bit, and then it starts to receive the data bits. After it receives the last data bit, it waits for the stop bit. Once it receives the stop bit, it knows that the data transmission is complete.
bk: Thanks for explaining that to me, aa. It's a lot clearer now.
"""
lines = conversation.lstrip('\n').rstrip('\n').split('\n')
for i in range(len(lines)):
    if lines[i].startswith('bk: '):
        key = 'other_user'
        message = lines[i].replace('bk: ', '')
    elif lines[i].startswith('aa: '):
        key = 'my_user'
        message = lines[i].replace('aa: ', '')
    else:
        print(lines[i])
        raise 'invalid line'

    created_at = (now + timedelta(minutes=i)).isoformat()
    create_message(
        client=dynamodb,
        message_group_uuid=message_group_uuid,
        created_at=created_at,
        message=message,
        my_user_uuid=users[key]['uuid'],
        my_user_display_name=users[key]['display_name'],
        my_user_handle=users[key]['handle']
    )
